[run]
source = .
omit =
    # Standard test and build artifacts
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */.venv/*
    */htmlcov/*
    setup.py
    main.py

    # === DISCORD BOT COVERAGE STRATEGY ===
    # We focus coverage on core business logic and user-facing functionality
    # while excluding complex Discord.py integration code that would require
    # extensive mocking and provide limited value.

    # Exclude Discord command modules requiring complex Discord.py mocking:
    # - These modules primarily contain Discord slash command registration
    # - Testing would require mocking discord.Interaction, command trees, etc.
    # - The business logic is minimal compared to integration complexity
    commands/config_commands.py      # Admin configuration commands
    commands/ping_commands.py        # Bot status/ping commands
    commands/stats_commands.py       # Statistics collection commands
    commands/wiki_commands.py        # Wiki/documentation commands

    # Exclude event handlers and services requiring live Discord client:
    # - These require Discord client connection and real-time events
    # - Testing would need complex Discord.py event system mocking
    # - Integration testing is more valuable than unit testing for these
    events/temperature_event.py      # Discord message event handlers
    services/stats_service.py        # Discord API statistics collection

[report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Standard Python coverage exclusions
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

    # Don't complain about abstract methods, they aren't run:
    @(abc\.)?abstractmethod

    # === DISCORD.PY INTEGRATION EXCLUSIONS ===
    # These patterns exclude Discord-specific code that requires complex mocking
    # and provides minimal business logic value when tested in isolation.

    # Discord command registration decorators:
    # - @bot.tree.command creates slash commands requiring Discord API
    # - @log_command/@log_event are logging decorators for Discord events
    @bot\.tree\.command
    @log_command
    @log_event

    # Discord interaction response patterns:
    # - These require live Discord.Interaction objects
    # - Testing would need extensive Discord.py mocking
    await interaction\.response\.send_message

    # Discord client lifecycle methods:
    # - These run when Discord client connects/syncs
    # - Require actual Discord connection to test meaningfully
    async def on_ready
    async def sync_commands

    # Discord interaction validation patterns:
    # - Guild/member validation for Discord commands
    # - Testing requires mocking Discord objects with complex hierarchies
    if not interaction\.guild:
    if not isinstance.*discord\.Member

ignore_errors = True

[html]
directory = htmlcov