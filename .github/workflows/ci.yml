name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        # Install Discord bot dependencies
        uv sync --directory discord-bot
        # Install Django web dependencies
        uv sync --directory web

    - name: Install pre-commit
      run: uv tool install pre-commit

    - name: Create required directories and files
      run: |
        # Create required directories for Django
        mkdir -p web/server_data

        # Create minimal Django local settings for tests
        if [ ! -f web/weakauras_web/local_settings.py ]; then
          echo "# Minimal settings for CI testing" > web/weakauras_web/local_settings.py
          echo "from .settings import *" >> web/weakauras_web/local_settings.py
          echo "SECRET_KEY = 'ci-test-key-not-for-production'" >> web/weakauras_web/local_settings.py
          echo "BOT_DATA_DIR = '/tmp/bot_data'" >> web/weakauras_web/local_settings.py
        fi

    - name: Run pre-commit hooks
      run: |
        # Run pre-commit on all files
        uv tool run pre-commit run --all-files

  tests:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        # Install Discord bot dependencies
        uv sync --directory discord-bot
        # Install Django web dependencies
        uv sync --directory web

    - name: Create required directories and files
      run: |
        # Create required directories for Django
        mkdir -p web/server_data

        # Create minimal Django local settings for tests
        if [ ! -f web/weakauras_web/local_settings.py ]; then
          echo "# Minimal settings for CI testing" > web/weakauras_web/local_settings.py
          echo "from .settings import *" >> web/weakauras_web/local_settings.py
          echo "SECRET_KEY = 'ci-test-key-not-for-production'" >> web/weakauras_web/local_settings.py
          echo "BOT_DATA_DIR = '/tmp/bot_data'" >> web/weakauras_web/local_settings.py
        fi

    - name: Run Discord Bot Tests
      run: bin/test-bot --coverage

    - name: Run Django Web Tests
      run: bin/test-web --verbose

    - name: Upload Discord Bot Coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: discord-bot-coverage
        path: discord-bot/htmlcov/
        retention-days: 30

    - name: Upload Django Web Coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: django-web-coverage
        path: web/htmlcov/
        retention-days: 30

  coverage-validation:
    name: Coverage Validation
    runs-on: ubuntu-latest
    needs: tests

    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        # Install Discord bot dependencies
        uv sync --directory discord-bot
        # Install Django web dependencies
        uv sync --directory web

    - name: Create required directories and files
      run: |
        # Create required directories for Django
        mkdir -p web/server_data

        # Create minimal Django local settings for tests
        if [ ! -f web/weakauras_web/local_settings.py ]; then
          echo "# Minimal settings for CI testing" > web/weakauras_web/local_settings.py
          echo "from .settings import *" >> web/weakauras_web/local_settings.py
          echo "SECRET_KEY = 'ci-test-key-not-for-production'" >> web/weakauras_web/local_settings.py
          echo "BOT_DATA_DIR = '/tmp/bot_data'" >> web/weakauras_web/local_settings.py
        fi

    - name: Run Comprehensive Coverage Validation
      run: |
        # Run coverage validation with 25% minimum threshold
        bin/test-coverage --min-coverage=25

    - name: Upload Combined Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: combined-coverage-report
        path: |
          discord-bot/htmlcov/
          web/htmlcov/
          discord-bot/coverage.xml
          web/coverage.xml
        retention-days: 30

  comprehensive-checks:
    name: Comprehensive Quality Checks
    runs-on: ubuntu-latest
    needs: [pre-commit, tests, coverage-validation]

    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        # Install Discord bot dependencies
        uv sync --directory discord-bot
        # Install Django web dependencies
        uv sync --directory web

    - name: Install pre-commit
      run: uv tool install pre-commit

    - name: Create required directories and files
      run: |
        # Create required directories for Django
        mkdir -p web/server_data

        # Create minimal Django local settings for tests
        if [ ! -f web/weakauras_web/local_settings.py ]; then
          echo "# Minimal settings for CI testing" > web/weakauras_web/local_settings.py
          echo "from .settings import *" >> web/weakauras_web/local_settings.py
          echo "SECRET_KEY = 'ci-test-key-not-for-production'" >> web/weakauras_web/local_settings.py
          echo "BOT_DATA_DIR = '/tmp/bot_data'" >> web/weakauras_web/local_settings.py
        fi

    - name: Run Manual Pre-commit Hooks
      run: |
        # Run all manual-stage hooks including coverage validation
        uv tool run pre-commit run --hook-stage manual --all-files

    - name: Security Scan - Check for Secrets
      run: |
        # Additional security check for hardcoded secrets
        echo "üîí Scanning for potential secrets..."
        if grep -r "sk-" . --exclude-dir=.git --exclude-dir=.venv --exclude-dir=htmlcov --exclude-dir=.github --exclude="*.lock"; then
          echo "‚ùå Found potential API keys (sk- pattern)"
          exit 1
        fi
        if grep -r "DISCORD_TOKEN.*=" . --exclude-dir=.git --exclude-dir=.venv --exclude-dir=htmlcov --exclude-dir=.github --exclude="*.lock" --exclude="*.example" --exclude="CLAUDE.md"; then
          echo "‚ùå Found potential hardcoded Discord tokens"
          exit 1
        fi
        echo "‚úÖ No obvious secrets found"

    - name: Validate Configuration Templates
      run: |
        # Ensure configuration templates are valid
        echo "üìã Validating configuration templates..."
        if [ ! -f discord-bot/settings/token.yml.example ]; then
          echo "‚ùå Missing token.yml.example template"
          exit 1
        fi
        # Test YAML syntax
        cd discord-bot && uv run python -c "import yaml; yaml.safe_load(open('settings/token.yml.example'))"
        echo "‚úÖ Configuration templates are valid"

    - name: Test Documentation Build
      run: |
        # Verify documentation can be built
        echo "üìö Testing documentation build..."
        cd docs
        uv sync
        uv run sphinx-build -b html . _build/html -W
        echo "‚úÖ Documentation builds successfully"
