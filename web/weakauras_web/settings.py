"""
Django settings for weakauras_web project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

import yaml
from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Load configuration from token.yml with fallback locations
def load_bot_config():
    """Load bot configuration from token.yml with fallback locations."""
    # Fallback paths to check for bot config (same as main.py)
    fallback_paths = [
        Path("~/.config/weakauras-bot/token.yml").expanduser(),
        Path("~/weakauras-bot-config/token.yml").expanduser(),
        BASE_DIR.parent / "discord-bot" / "settings" / "token.yml",
    ]

    for config_path in fallback_paths:
        if config_path.exists():
            try:
                with open(config_path) as f:
                    return yaml.safe_load(f)
            except (yaml.YAMLError, KeyError, TypeError):
                continue

    # Return empty config if none found
    return {}


# Load bot configuration
_bot_config = load_bot_config()

# Environment detection - check for DJANGO_ENV or fall back to development
ENVIRONMENT = os.getenv("DJANGO_ENV", "dev")


# Bot data directory (shared with the Discord bot)
def load_bot_data_dir():
    """Load bot data directory from configuration with fallback locations."""
    data_dir_name = _bot_config.get("storage", {}).get("data_directory", "server_data")

    # Check if it's an absolute path or contains ~ (home directory)
    if data_dir_name.startswith(("/", "~")):
        # Absolute path or home directory - expand ~ and use as-is
        return Path(data_dir_name).expanduser().resolve()

    # Relative path - make it relative to the bot package location
    bot_package_dir = BASE_DIR.parent / "discord-bot"
    return bot_package_dir / data_dir_name


BOT_DATA_DIR = load_bot_data_dir()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
# Load SECRET_KEY from token.yml configuration based on environment
def get_secret_key():
    """Get Django SECRET_KEY from configuration with environment support."""
    django_config = _bot_config.get("django", {})
    secret_keys = django_config.get("secret_keys", {})

    # Try to get environment-specific secret key
    secret_key = secret_keys.get(ENVIRONMENT)

    if not secret_key:
        # Fallback to single secret_key for backward compatibility
        secret_key = django_config.get("secret_key")

    if not secret_key:
        if ENVIRONMENT == "dev":
            # Allow default SECRET_KEY for development/CI environments
            return "django-insecure-dev-default-key-not-for-production"

        msg = (
            f"Django SECRET_KEY is required for '{ENVIRONMENT}' environment. "
            f"Add 'django.secret_keys.{ENVIRONMENT}' to your token.yml configuration."
        )
        raise ValueError(msg)

    return secret_key


SECRET_KEY = get_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG based on environment - False for production
DEBUG = ENVIRONMENT == "dev"

# Allow all hosts for internet access - configure your domain/IP here
# For production, replace with your actual domain name
ALLOWED_HOSTS = ["*"]  # Allow all hosts - change to specific domain in production


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.humanize",
    # Third party apps
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.discord",
    "rest_framework",
    # Local apps
    "authentication",
    "macros",
    "servers",
    "shared",
    "user_stats",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

# Security settings for internet deployment
if not DEBUG:
    # Force HTTPS
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    # Secure cookies
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    # Prevent clickjacking
    X_FRAME_OPTIONS = "DENY"

    # Content type sniffing protection
    SECURE_CONTENT_TYPE_NOSNIFF = True

    # XSS protection
    SECURE_BROWSER_XSS_FILTER = True

ROOT_URLCONF = "weakauras_web.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "weakauras_web.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Check for database configuration in bot config
_database_url = _bot_config.get("django", {}).get("database_url")

if _database_url:
    # Use configured database URL (supports SQLite, PostgreSQL, MySQL, etc.)
    import os
    from pathlib import Path as PathLib

    if _database_url.startswith("sqlite:///~/"):
        # Expand ~ to home directory for SQLite paths
        sqlite_path = _database_url.replace("sqlite:///~/", "")
        expanded_path = os.path.expanduser(f"~/{sqlite_path}")
        # Ensure directory exists
        PathLib(expanded_path).parent.mkdir(parents=True, exist_ok=True)
        _database_url = f"sqlite:///{expanded_path}"

    # Parse database URL (requires dj-database-url for complex URLs)
    if _database_url.startswith("sqlite:///"):
        db_path = _database_url.replace("sqlite:///", "")
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": db_path,
            }
        }
    else:
        # For PostgreSQL, MySQL, etc. - would need dj-database-url
        # For now, fall back to default
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }
else:
    # Use default SQLite database in repository (unsafe - deleted by git clean)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Caching configuration for Discord API rate limiting
# https://docs.djangoproject.com/en/5.2/topics/cache/
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "weakauras-cache",
        "TIMEOUT": 300,  # Default 5 minutes
        "OPTIONS": {
            "MAX_ENTRIES": 1000,
        },
    }
}

# Discord API cache timeout settings (in seconds)
DISCORD_GUILD_CACHE_TIMEOUT = 300  # 5 minutes for guild data
DISCORD_USER_CACHE_TIMEOUT = 300  # 5 minutes for user data

# Statistics cache timeout settings (in seconds)
USER_STATS_CACHE_TIMEOUT = 300  # 5 minutes for user statistics data


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django sites framework
SITE_ID = 1

# Django allauth configuration
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Login/logout URLs
LOGIN_URL = "/accounts/login/"
LOGOUT_URL = "/accounts/logout/"
LOGIN_REDIRECT_URL = "/dashboard/"
LOGOUT_REDIRECT_URL = "/"

# Allauth settings - Discord OAuth only
ACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_QUERY_EMAIL = True

# Modern allauth settings (replaces deprecated EMAIL_REQUIRED/USERNAME_REQUIRED)
ACCOUNT_SIGNUP_FIELDS = []  # No signup fields needed - Discord OAuth only

# Use custom social account adapter but keep default account adapter
SOCIALACCOUNT_ADAPTER = "authentication.adapters.DiscordOnlySocialAccountAdapter"
# Use HTTPS in production, HTTP in development
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https" if ENVIRONMENT == "prod" else "http"

# Force Discord OAuth only - disable regular signup/login
ACCOUNT_SIGNUP_REDIRECT_URL = "/dashboard/"
ACCOUNT_LOGIN_ON_GET = False

# Auto-connect social accounts
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_LOGIN_ON_GET = True

# Discord OAuth settings (will be loaded from bot config)
SOCIALACCOUNT_PROVIDERS = {
    "discord": {
        "SCOPE": ["identify", "guilds"],
        "AUTH_PARAMS": {"response_type": "code"},
        "VERIFIED_EMAIL": False,  # Discord email verification not required
    }
}

# Ensure tokens are stored
SOCIALACCOUNT_STORE_TOKENS = True

# Static files configuration
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Serve static files in production (only for development/simple deployments)
# For production with high traffic, use nginx or similar
if not DEBUG:
    # Add WhiteNoise middleware for static file serving
    MIDDLEWARE.insert(1, "whitenoise.middleware.WhiteNoiseMiddleware")
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Discord OAuth credentials are configured in the database via SocialApp model
# No need to load from YAML - this was causing conflicts

# Django Messages Configuration
# Map Django message levels to Bootstrap alert classes
MESSAGE_TAGS = {
    messages.DEBUG: "secondary",
    messages.INFO: "info",
    messages.SUCCESS: "success",
    messages.WARNING: "warning",
    messages.ERROR: "danger",
}

# Ensure messages persist across redirects using session storage
MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"


# Feature flags configuration
def load_feature_flags():
    """Load feature flags from configuration with defaults."""
    features = _bot_config.get("django", {}).get("features", {})
    return {
        "macro_preview": features.get("macro_preview", True),  # Default: enabled
    }


FEATURE_FLAGS = load_feature_flags()

# Logging configuration to show debug statements
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "macros": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "servers": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "user_stats": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}
